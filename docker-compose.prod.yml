version: '3.8'

services:
  # Main application
  zig-pkg-checker:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    image: zig-pkg-checker:latest
    container_name: zig-pkg-checker
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      # Docker socket for build system
      - /var/run/docker.sock:/var/run/docker.sock
      # Persistent data
      - ./data:/app/data
      # Build results storage
      - /tmp/build_results:/tmp/build_results
      # Logs
      - ./logs:/app/logs
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - ZIG_PKG_CHECKER_ENV=production
    networks:
      - zig-pkg-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - zig-master
      - zig-0-14-0
      - zig-0-13-0
      - zig-0-12-0
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.zig-pkg-checker.rule=Host(`zig-pkg-checker.local`)"
      - "traefik.http.services.zig-pkg-checker.loadbalancer.server.port=3001"

  # Zig build environments
  zig-master:
    build:
      context: ./docker/zig-master
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    image: zig-checker:master
    container_name: zig-checker-master
    profiles:
      - build-env
    networks:
      - zig-pkg-network
    labels:
      - "zig-pkg-checker.component=build-env"
      - "zig-pkg-checker.version=master"

  zig-0-14-0:
    build:
      context: ./docker/zig-0.14.0
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    image: zig-checker:0.14.0
    container_name: zig-checker-0-14-0
    profiles:
      - build-env
    networks:
      - zig-pkg-network
    labels:
      - "zig-pkg-checker.component=build-env"
      - "zig-pkg-checker.version=0.14.0"

  zig-0-13-0:
    build:
      context: ./docker/zig-0.13.0
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    image: zig-checker:0.13.0
    container_name: zig-checker-0-13-0
    profiles:
      - build-env
    networks:
      - zig-pkg-network
    labels:
      - "zig-pkg-checker.component=build-env"
      - "zig-pkg-checker.version=0.13.0"

  zig-0-12-0:
    build:
      context: ./docker/zig-0.12.0
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    image: zig-checker:0.12.0
    container_name: zig-checker-0-12-0
    profiles:
      - build-env
    networks:
      - zig-pkg-network
    labels:
      - "zig-pkg-checker.component=build-env"
      - "zig-pkg-checker.version=0.12.0"

  # Optional: Reverse proxy (Traefik)
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik
      - ./traefik/acme:/acme
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=admin@example.com
      - --certificatesresolvers.letsencrypt.acme.storage=/acme/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    networks:
      - zig-pkg-network
    profiles:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.local`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - zig-pkg-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - zig-pkg-network
    profiles:
      - monitoring

networks:
  zig-pkg-network:
    driver: bridge
    name: zig-pkg-network

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local 